{"ast":null,"code":"import _regeneratorRuntime from\"/home/jubran/general_assembly/sei/Flamingos/unit_3/homework/Gnome-A-zon/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/jubran/general_assembly/sei/Flamingos/unit_3/homework/Gnome-A-zon/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';var getToken=function getToken(){return new Promise(function(resolve){resolve(\"Bearer \".concat(localStorage.getItem('token')||null));});};var herokuURL=\"saltygnome.herokuapp.com/api\";var api=axios.create({baseURL:process.env.NODE_ENV==='production'?\"https://\".concat(herokuURL):'http://localhost:3000/api'});api.interceptors.request.use(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(config){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getToken();case 2:config.headers['Authorization']=_context.sent;return _context.abrupt(\"return\",config);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}(),function(error){console.log('Request error: ',error);return Promise.reject(error);});export default api;","map":{"version":3,"sources":["/home/jubran/general_assembly/sei/Flamingos/unit_3/homework/Gnome-A-zon/client/src/services/apiConfig.js"],"names":["axios","getToken","Promise","resolve","localStorage","getItem","herokuURL","api","create","baseURL","process","env","NODE_ENV","interceptors","request","use","config","headers","error","console","log","reject"],"mappings":"+TAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAAAC,OAAO,CAAI,CAC5BA,OAAO,kBAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,GAAiC,IAA5C,EAAP,CACD,CAFM,CAAP,CAGD,CAJD,CAMA,GAAMC,CAAAA,SAAS,CAAG,8BAAlB,CAEA,GAAMC,CAAAA,GAAG,CAAGP,KAAK,CAACQ,MAAN,CAAa,CACvBC,OAAO,CAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAAzB,mBACIN,SADJ,EAEP,2BAHqB,CAAb,CAAZ,CAMAC,GAAG,CAACM,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,0FAA6B,iBAAgBC,MAAhB,wIACaf,CAAAA,QAAQ,EADrB,QAC3Be,MAAM,CAACC,OAAP,CAAe,eAAf,CAD2B,+CAEpBD,MAFoB,wDAA7B,+DAGG,SAASE,KAAT,CAAgB,CACjBC,OAAO,CAACC,GAAR,CAAY,iBAAZ,CAA+BF,KAA/B,EACA,MAAOhB,CAAAA,OAAO,CAACmB,MAAR,CAAeH,KAAf,CAAP,CACD,CAND,EAQA,cAAeX,CAAAA,GAAf","sourcesContent":["import axios from 'axios';\n\nconst getToken = () => {\n  return new Promise(resolve => {\n    resolve(`Bearer ${localStorage.getItem('token') || null}`);\n  })\n}\n\nconst herokuURL = \"saltygnome.herokuapp.com/api\";\n\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production'\n  ? `https://${herokuURL}`\n  : 'http://localhost:3000/api'\n});\n\napi.interceptors.request.use(async function (config){\n  config.headers['Authorization'] = await getToken();\n  return config;\n}, function(error) {\n  console.log('Request error: ', error);\n  return Promise.reject(error);\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}