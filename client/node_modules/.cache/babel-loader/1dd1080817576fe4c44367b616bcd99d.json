{"ast":null,"code":"import axios from 'axios';\n\nconst getToken = () => {\n  return new Promise(resolve => {\n    resolve(`Bearer ${localStorage.getItem('token') || null}`);\n  });\n};\n\nconst herokuURL = \"saltygnome.herokuapp.com/api\";\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? `https://${herokuURL}` : 'http://localhost:3000/api'\n});\napi.interceptors.request.use(async function (config) {\n  config.headers['Authorization'] = await getToken();\n  return config;\n}, function (error) {\n  console.log('Request error: ', error);\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"sources":["/home/jubran/general_assembly/sei/Flamingos/unit_3/homework/Gnome-A-zon/client/src/services/apiConfig.js"],"names":["axios","getToken","Promise","resolve","localStorage","getItem","herokuURL","api","create","baseURL","process","env","NODE_ENV","interceptors","request","use","config","headers","error","console","log","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5BA,IAAAA,OAAO,CAAE,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiC,IAAK,EAAjD,CAAP;AACD,GAFM,CAAP;AAGD,CAJD;;AAMA,MAAMC,SAAS,GAAG,8BAAlB;AAEA,MAAMC,GAAG,GAAGP,KAAK,CAACQ,MAAN,CAAa;AACvBC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACN,WAAUN,SAAU,EADd,GAEP;AAHqB,CAAb,CAAZ;AAMAC,GAAG,CAACM,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,gBAAgBC,MAAhB,EAAuB;AAClDA,EAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkC,MAAMhB,QAAQ,EAAhD;AACA,SAAOe,MAAP;AACD,CAHD,EAGG,UAASE,KAAT,EAAgB;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,KAA/B;AACA,SAAOhB,OAAO,CAACmB,MAAR,CAAeH,KAAf,CAAP;AACD,CAND;AAQA,eAAeX,GAAf","sourcesContent":["import axios from 'axios';\n\nconst getToken = () => {\n  return new Promise(resolve => {\n    resolve(`Bearer ${localStorage.getItem('token') || null}`);\n  })\n}\n\nconst herokuURL = \"saltygnome.herokuapp.com/api\";\n\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'production'\n  ? `https://${herokuURL}`\n  : 'http://localhost:3000/api'\n});\n\napi.interceptors.request.use(async function (config){\n  config.headers['Authorization'] = await getToken();\n  return config;\n}, function(error) {\n  console.log('Request error: ', error);\n  return Promise.reject(error);\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}